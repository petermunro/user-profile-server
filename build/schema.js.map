{"version":3,"sources":["../src/schema.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;AAYA;;AAIA;;;;;;;;;;;;;uBAQiC,mCAC/B,UAAC,QAAD,EAAc;AAAA,sBACK,aAAa,QAAb,CADL;;AAAA,MACP,IADO,iBACP,IADO;AAAA,MACD,EADC,iBACD,EADC;;AAEZ,MAAI,SAAS,MAAb,EAAqB;AACnB,WAAO,QAAQ,EAAR,CAAP;AACD,GAFD,MAEO,IAAI,SAAS,QAAb,EAAuB;AAC5B,WAAO,UAAU,EAAV,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF,CAV8B,EAW/B,UAAC,GAAD,EAAS;AACP,MAAI,eAAe,IAAnB,EAAyB;AACvB,WAAO,QAAP;AACD,GAFD,MAEO,IAAI,eAAe,MAAnB,EAA4B;AACjC,WAAO,UAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF,CAnB8B,C;;IAA5B,a,oBAAA,a;IAAe,S,oBAAA,S;;;AAuBpB,IAAM,eAAe,+BAAsB;AACzC,QAAM,UADmC;AAEzC,eAAa,YAF4B;AAGzC,UAAQ;AAAA,WAAO;AACb,YAAM;AACJ,oCADI;AAEJ,qBAAa;AAFT,OADO;AAKb,eAAS;AACP,oCADO;AAEP,qBAAa;AAFN;AALI,KAAP;AAAA;AAHiC,CAAtB,CAArB;;;;;;AAmBA,IAAI,kBAAkB,+BAAsB;AAC1C,QAAM,aADoC;AAE1C,eAAa,gBAF6B;AAG1C,UAAQ;AAAA,WAAO;AACb,YAAM;AACJ,oCADI;AAEJ,qBAAa;AAFT,OADO;AAKb,gBAAU;AACR,cAAM,YADE;AAER,qBAAa;AAFL;AALG,KAAP;AAAA;AAHkC,CAAtB,CAAtB;;AAiBA,IAAM,SAAS,2BAAkB;AAC/B,SAAO,+BAAsB;AAC3B,UAAM,eADqB;AAE3B,YAAQ;AACN,YAAM,SADA;AAEN,oBAAc;AACZ,cAAM,yBAAgB,eAAhB,CADM;AAEZ,iBAAS;AAAA;AAAA;AAFG;AAFR;AAFmB,GAAtB;AADwB,CAAlB,CAAf;;kBAae,M","file":"schema.js","sourcesContent":["'use strict';\n\nimport {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\n\nimport {\n  nodeDefinitions,\n} from 'graphql-relay';\n\nimport userProfiles from './user-profiles.json';\n\n/**\n * We get the node interface and field from the Relay library.\n *\n * The first method defines the way we resolve an ID to its object.\n * The second defines the way we resolve an object to its GraphQL type.\n */\nvar {nodeInterface, nodeField} = nodeDefinitions(\n  (globalId) => {\n    var {type, id} = fromGlobalId(globalId);\n    if (type === 'User') {\n      return getUser(id);\n    } else if (type === 'Widget') {\n      return getWidget(id);\n    } else {\n      return null;\n    }\n  },\n  (obj) => {\n    if (obj instanceof User) {\n      return userType;\n    } else if (obj instanceof Widget)  {\n      return widgetType;\n    } else {\n      return null;\n    }\n  }\n);\n\n\nconst LocationType = new GraphQLObjectType({\n  name: 'Location',\n  description: 'A location',\n  fields: () => ({\n    city: {\n      type: GraphQLString,\n      description: 'The user\\'s city'\n    },\n    country: {\n      type: GraphQLString,\n      description: 'The user\\'s country'\n    }\n  })\n});\n\n/**\n * This is the type that will be the root of our query,\n * and the entry point into our schema.\n */\nlet UserProfileType = new GraphQLObjectType({\n  name: 'UserProfile',\n  description: 'A user profile',\n  fields: () => ({\n    name: {\n      type: GraphQLString,\n      description: 'The name of this user'\n    },\n    location: {\n      type: LocationType,\n      description: 'The user\\'s location'\n    }\n  }),\n});\n\n\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n      node: nodeField,\n      userProfiles: {\n        type: new GraphQLList(UserProfileType),\n        resolve: () => userProfiles\n      }\n    }\n  })\n});\n\nexport default schema;\n"]}